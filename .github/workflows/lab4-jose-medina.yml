name: DevSecOps-jm-sysadm

on:
  push:
    branches:
      - feature-jm-sysadm #main
      #- '**'
jobs:
  SAST:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: SATS - Set Environment Variables
        run: |
          echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "ORG_NAME=devsecops-jm" >> $GITHUB_ENV

      - name: Validando proyecto en SonarCloud
        id: validateProjectOnSonar
        run: |
          #pwd
          #ls -R
          set +e
          curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' -d 'name=${{ github.event.repository.name }}' -d 'project=${{ github.event.repository.name }}' -d 'organization=$ORG_NAME' -d 'visibility=public'
          if [ $? -ne 0 ]; then
            echo "Proyecto ya existe en Sonarcloud"
            echo "project_created=false" >> $GITHUB_ENV
          else
            echo "Proyecto ${{ github.event.repository.name }} creado exitosamente en Sonarcloud"
            
            echo "Se establece rama $BRANCH_NAME como rama por defecto"
            curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' -d 'name=$BRANCH_NAME' -d 'project=${{ github.event.repository.name }}'
            echo "project_created=true" >> $GITHUB_ENV
          fi
          set -e

      - name: Perform Initial Analysis (if Project Created)
        if: env.project_created == 'true'
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          DSO_TK_SONARCLOUD: ${{ secrets.SONAR_TOKEN }}
          REPO_NAME: ${{ github.event.repository.name }}
          BRANCH_NAME: ${{ github.ref_name }}
        with:
            args:
              -Dsonar.projectKey=$REPO_NAME
              -Dsonar.organization=$ORG_NAME
              -Dsonar.host.url=https://sonarcloud.io
              -Dsonar.token=$DSO_TK_SONARCLOUD
              -Dsonar.branch.name=$BRANCH_NAME
            projectBaseDir: .

      - name: Perform Branch Analysis
        if: env.project_created == 'false'
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          DSO_TK_SONARCLOUD: ${{ secrets.SONAR_TOKEN}}
          REPO_NAME: ${{ github.event.repository.name }}
          BRANCH_NAME: ${{ github.ref_name }}        
        with:
            args:
              -Dsonar.projectKey="$REPO_NAME"
              -Dsonar.organization="$ORG_NAME"
              -Dsonar.host.url="https://sonarcloud.io"
              -Dsonar.token="$DSO_TK_SONARCLOUD"
              -Dsonar.branch.name="$BRANCH_NAME"
            projectBaseDir: .

      - name: Quality Gate
        env:
          DSO_TK_SONARCLOUD: ${{ secrets.SONAR_TOKEN}}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "Validando el estado del Quality Gate..."
          analysisId=$(curl -s -u "$DSO_TK_SONARCLOUD:" \
            "https://sonarcloud.io/api/ce/component?component=$REPO_NAME" | jq -r '.current.analysisId')

          qualityGateStatus=$(curl -s -u "$DSO_TK_SONARCLOUD:" \
            "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId" | jq -r '.projectStatus.status')

          if [ "$qualityGateStatus" == "NONE" ]; then
            echo "El proyecto no cumple con el Quality Gate, status: $qualityGateStatus es parte de la capa gratuita"
            exit 0 # exit 1
          fi
            echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
          if [ "$qualityGateStatus" != "OK" ]; then
            echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
            echo "Verificando vulnerabilidades críticas..."
            vulnerabilities=$(curl -s -u "$DSO_TK_SONARCLOUD:" \
              "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER" | jq -r '.total')

            if [ "$vulnerabilities" -gt 0 ]; then
              echo "Se encontraron $vulnerabilities vulnerabilidades críticas. El proyecto no cumple con los estándares de seguridad."
              exit 1
            fi
          fi

          echo "El proyecto cumple con el Quality Gate y no tiene vulnerabilidades críticas. Continuando sin problemas."

  SCA:
    needs: SAST
    runs-on: ubuntu-24.04
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Build
      run: |
          echo "En construcción"

    - name: Dependency Check
      run: |
          echo "En construcción"
        
    - name: Upload Test Result
      run: |
          echo "En construcción"

  
  DockerBuild:
    needs: SCA
    runs-on: ubuntu-24.04
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Docker Login
      run: |
          echo "En construcción"
    
    - name: Deploy Project
      run: |
          echo "En construcción"

    - name: Docker Build
      run: |
          echo "En construcción"

    - name: Push Docker
      run: |
          echo "En construcción"
  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-24.04
    steps:
    
    - name: Docker Login
      run: |
          echo "En construcción"
    
    - name: Pull Docker
      run: |
          echo "En construcción"

    - name: Run Trivy Scan
      run: |
          echo "En construcción"

    
